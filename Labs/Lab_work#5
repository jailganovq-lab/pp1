4)
/*
Input/output of a 2D array with n rows and m columns using a nested for loop
*/

#include <iostream>
using namespace std;
int main() {
    int n; // amount of rows
    int m; // amount of columns
    cin >> n >> m;
    // 2D array with n rows and n columns
    int a[n][m];   
    // input
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cin >> a[i][j];
        }
    }
    // output
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}




6)
/*
Sorting/reversing all the elements in a 2D array using <algorithm>
*/

#include <iostream>
#include <algorithm>
using namespace std;
int main() {
    int n; 
    int m; 
    cin >> n >> m;
    int a[n][m];
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cin >> a[i][j];
        }
    }

    // int a[n];
    // sort(*a, *a + n * m);
    reverse(*a, *a + n * m);
    
    // output
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}

7)
/*
Sorting/reversing a specific range of elements in a 2D array using <algorithm>
*/

#include <iostream>
#include <algorithm>

using namespace std;

int main() {

    int n; // amount of rows
    int m; // amount of columns

    cin >> n >> m;

    // 2D array with n rows and n columns
    int a[n][m];
    
    // input
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cin >> a[i][j];
        }
    }

    int first_i, first_j;
    int last_i, last_j;

    cin >> first_i >> first_j >> last_i >> last_j;

    sort(*a + first_i * m + first_j, *a + last_i * m + last_j + 1);
    // reverse(*a + first_i * m + first_j, *a + last_i * m + last_j + 1);
    
    // output
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

8)
/*
Position of the max element
*/

#include <iostream>
#include <algorithm>

using namespace std;

int main() {

    int n; // amount of rows
    int m; // amount of columns

    cin >> n >> m;

    // 2D array with n rows and n columns
    int a[n][m];
    
    // input
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            cin >> a[i][j];
        }
    }

    int max_i = 0, max_j = 0;

    // finding max
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < m; ++j) {
            if(a[i][j] > a[max_i][max_j]) {
                max_i = i;
                max_j = j;
            }
        }
    }
    cout << max_i + 1 << " " << max_j + 1<< endl;  position
    cout << "indexes: " << max_i << " " << max_j << endl;
    cout << "value: " << a[max_i][max_j] << endl;

    return 0;
}



10)
/*
Outputting elements of the secondary diagonal of an n by n 2D array
*/

#include <iostream>
#include <algorithm>

using namespace std;

int main() {

    int n; // amount of rows and columns

    cin >> n;

    // 2D array with n rows and n columns
    int a[n][n];
    
    // input
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            cin >> a[i][j];
        }
    }

    for(int i = 0; i < n; ++i) {
        cout << a[i][n - 1 - i] << endl;   
    }

    return 0;
}

11)/*
Determine if a sqare matrix (n by n 2D array) is symmetrical over the main diagonal
*/

#include <iostream>
#include <algorithm>

using namespace std;

int main() {

    int n; // amount of rows and columns

    cin >> n;

    // 2D array with n rows and n columns
    int a[n][n];
    
    // input
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            cin >> a[i][j];
        }
    }

    for(int i = 0; i < n; ++i) {
        for(int j = i + 1; j < n; ++j) {
            if(a[i][j] == a[j][i]) continue;
            else {
                cout << "Not symmetrical\n";
                return 0; // stops the whole program
            }
        }   
    }

    cout << "Symmetrical\n";

    return 0;
}


/*
Outputting elements of the main diagonal of an n by n 2D array
*/

#include <iostream>
#include <algorithm>

using namespace std;

int main() {

    int n; // amount of rows and columns

    cin >> n;

    // 2D array with n rows and n columns
    int a[n][n];
    
    // input
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            cin >> a[i][j];
        }
    }

    for(int i = 0; i < n; ++i) {
        cout << a[i][i] << endl;   
    }

    return 0;
}
