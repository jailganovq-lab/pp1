1)	Decimal to binary
code:
#include <iostream>
using namespace std;
int main(){
    int a;
    cin >> a;
    string res = "";
    while(a>0){
        int rem = a%2;
        a/=2;
        res += 48 + rem;
    }
    for(int i = res.length()-1; i>=0; --i){
        cout << res[i];
    }
    cout << endl;
    return 0;
}

2)from bin to dec
code:
#include <iostream>
using namespace std;
int main() {
    string bin;
    cin >> bin;
    int res = 0; // decimal value of bin
    int power = 1; // value of 2 to the power of 0
    // going over the string in reverse
    for(int i = bin.length() - 1; i >= 0; --i) {
        bin[i]; // 1 or 0 (char)
        res += (bin[i] - '0') * power;
        power *= 2; 
    }
    cout << res << endl;
    return 0;
}



3)from dec to any

#include <iostream>
#include <algorithm> // needed for reverse()
using namespace std;
int main() {
    int n, base; // the base we are converting into
    cin >> n >> base;
    string digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    string res = "";
    while(n > 0) {
        int rem = n % base;
        n /= base;
        res += digits[rem];
    }
    reverse(res.begin(), res.end());
    cout << res << endl;
    return 0;
}


Setting a bit: x |= (1 << n) sets bit n.
Clearing a bit: x &= ~(1 << n) clears bit n.
Toggling a bit: x ^= (1 << n) flips bit n.
Checking bit: (x >> n) & 1 returns bit n (0 or 1).
Check if even: (x & 1) == 0 -> true if even.
code:
#include <iostream>
using namespace std;
int main() {
    int a = 3; // 32-bit signed integer
    // setting a bit:
    cout << (a | (1 << 3)) << endl;
    int n = 3;
    a |= (1 << n);
    cout << a << endl;

    // clearing a bit (bit masking):
    cout << (a & ~(1 << 3)) << endl;
    n = 3;
    a &= ~(1 << n);
    cout << a << endl;

    // toggling a bit:
    n = 3;
    a ^= (1 << n);
    cout << a << endl;
    cout << (a ^ (1 << 3)) << endl;

    // checking a bit:
    n = 3;
    cout << ((a >> n) & 1) << endl;

    // checking if the number is even:
    cout << ((a & 1) == 0) << endl;

    return 0;
}





4)In this problem, you are given an 8-bit number . Your task is to find the number of 1-bits in its binary representation.
For example, the binary representation of the number 23 is 00010111. The number of 1-bits is 4.

#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n; // 8-бит сан
    int count = 0;

    for (int i = 0; i < 8; i++) {
        if ((n >> i) & 1) {
            count++;
        }
    }
    cout << count << endl;
    return 0;
}


5)You are given a 9-bit number . Flip all the bits in its binary representation. Flipping a bit means replacing it with the opposite one.

#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;    
    // 9 биттің барлығы 1 → 511 (binary: 111111111)
    int result = 511 - n;
    cout << result << endl;
    return 0;
}


6)You are given a 7-bit number. Find its rightmost set bit (1-bit) in its binary representation.

#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    int index = 0;
    while (n > 0) {
        if (n & 1) { 
            cout << index << endl;
            return 0;
        }
        n >>= 1;
        index++;
    }
    return 0;
}



7)Given n numbers you need to output the number of zeros among these numbers

#include <iostream>
using namespace std;
int main(){
    int a;
    cin >> a;
    int temp;
    int sum = 0;
    for(int i=0; i<a ; ++i){
        cin >> temp;
        while(temp>0){
        if(temp % 10==0){
            sum+=1;
        }
        temp /=10 ;
    }
    }
    cout << sum << endl;
}


8)You’re given a sequence of digits (0-9). You need to answer whether the sum of digits in odd positions is equal to the sum of digits in even positions.

#include <iostream>
#include <string>
using namespace std;
int main() {
    string s;
    cin >> s;
    int oddSum = 0, evenSum = 0;
    for (int i = 0; i < s.size(); i++) {
        int digit = s[i] - '0'; // символды санға айналдыру
        if ((i + 1) % 2 == 1)   // позицияны 1-ден бастап санау
            oddSum += digit;
        else
            evenSum += digit;
    }
    if (oddSum == evenSum)
        cout << "YES";
    else
        cout << "NO";

    return 0;
}



9)Van Sama wants to go to the Mr. International Leather Contest. To transport his belongings, he bought a suitcase with a 4-digit combination lock. To unlock this lock, he needs to calculate the difference between the sum of all the even digits and the sum of all the odd digits in the combination lock. Help Van calculate this number.
#include <iostream>
#include <string>
using namespace std;

int main() {
    string s;
    cin >> s;

    int oddSum = 0, evenSum = 0;

    for (int i = 0; i < s.size(); i++) {
        int digit = s[i] - '0'; // символды санға айналдыру
        if ((i + 1) % 2 == 1)   // позицияны 1-ден бастап санау
            oddSum += digit;
        else
            evenSum += digit;
    }
    cout << evenSum - oddSum << endl;
    return 0;
}


10)Given a decimal number , convert it to the hexadecimal numeric system. It is guaranteed that 1 hexadecimal digit is enough to represent the number . Important: Output the answer as a char.
Hexadecimal numbers use 16 values to represent a number. The numbers 0 through 9 are represented by the characters 0-9, and 10-15 are represented by the characters A through F.

#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    char hexChar;
    if (n < 10)
        hexChar = '0' + n;       // цифр
    else
        hexChar = 'A' + (n - 10); // әріп

    cout << hexChar << endl;
    return 0;
}
